#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail

# NSSA_ prefix should used for all Netspective Studios Service Appliance (NSSA) env vars

export NSSA_IS_WSL=0
if [[ "$(< /proc/version)" == *@(Microsoft|WSL)* ]]; then
    if [[ "$(< /proc/version)" == *@(WSL2)* ]]; then
        export NSSA_IS_WSL=2
    else
        export NSSA_IS_WSL=1
    fi
fi

export NSSA_IS_PRIVILEGED=0
if [ "$EUID" -eq 0 ]
  export NSSA_IS_PRIVILEGED=1
fi

# TODO: check if secrets.d/secrets.ansible-vars.yml exists:
#       if yes, run it through Ansible lint
#       if not, copy from template and stop:
# sudo cp $NSSA_APPLIANCE_SECRETS_HOME/secrets-tmpl.ansible-vars.yml $NSSA_APPLIANCE_SECRETS_HOME/secrets.ansible-vars.yml
# exit 1

# The setup-common.sh script should be sourced from an appliance-specific 
# setup script running in the home directory of the appliance, which is
# located in $NSSA_HOME/appliances/[applianceID]. The assumption is that
# `cwd` would return $NSSA_HOME/appliances/[applianceID].

# Each appliance configuration should be under NSSA_HOME/appliances so 
# NSSA_HOME is two directories up and we should set it in case any of
# other configuration files need it.
export NSSA_HOME=${NSSA_APPLIANCE:-$(realpath ../..)}

# `cwd` would return $NSSA_HOME/appliances/[applianceID]
export NSSA_APPLIANCE=${NSSA_APPLIANCE:-$(basename `cwd`)}
export NSSA_APPLIANCE_HOME=${NSSA_APPLIANCE:-$(cwd)}
export NSSA_APPLIANCE_CONF_HOME=${NSSA_APPLIANCE:-$NSSA_APPLIANCE_HOME/conf}
export NSSA_APPLIANCE_SECRETS_HOME=${NSSA_APPLIANCE:-$NSSA_APPLIANCE_HOME/secrets.d}
export NSSA_APPLIANCE_PLAYBOOKS_HOME=${NSSA_APPLIANCE:-$NSSA_APPLIANCE_HOME/playbooks.d}

# Each appliance directory contains:
# - bin/* are either files or symlinks to $NSSA_HOME/bin/* entries
# - conf/* are either files or symlinks to $NSSA_HOME/conf/* entries
# - config/config.ts is an optional TypeScript Governed Structured Data (GSD) file
# - config/config.auto.* are files generated by the optional config.ts file
# - playbooks.d/* are either files or symlinks to NSSA_HOME/playbooks/* entries

report() {
    local color='\033[1;37m'
    local nc='\033[0m'
    printf "\n${color}$1${nc}\n"
}

# TODO: move osQuery to Ansible installation?
#       ansible-galaxy install apolloclark.osquery
report "Install osQuery"
export OSQUERY_KEY=1484120AC4E9F8A1A577AEEE97A80C63C9D8B80B
sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys $OSQUERY_KEY
sudo add-apt-repository 'deb [arch=amd64] https://pkg.osquery.io/deb deb main'
sudo apt-get update
sudo apt-get install -y osquery

report "Install roles from Ansible Galaxy"
sudo ansible-galaxy install geerlingguy.docker
sudo ansible-galaxy install bertvv.samba
sudo ansible-galaxy install geerlingguy.kubernetes

report "Finish setting up shell"
zsh -i -c setupsolarized dircolors.256dark

# TODO: use $NSSA_IS_PRIVILEGED to figure out whether to use sudo?
#       should we not use sudo and force Ansible playbooks to use `become: true`?

report "Run all numbered playbooks for $(whoami) appliance $NSSA_APPLIANCE from $NSSA_APPLIANCE_PLAYBOOKS_HOME"
for playbook in `ls $NSSA_APPLIANCE_PLAYBOOKS_HOME/*.ansible-playbook.yml | egrep "^$NSSA_APPLIANCE_PLAYBOOKS_HOME/[0-9]" | sort -V`; do 
	sudo ansible-playbook -i "localhost," -c local $playbook --extra-vars="nssa_is_privileged=$NSSA_IS_PRIVILEGED nssa_user=$(whoami) nssa_home=$NSSA_HOME nssa_home_user="/home/$(whoami)/.nssa" nssa_appliance_id=$NSSA_APPLIANCE nssa_appliance_defn_home=$NSSA_APPLIANCE_HOME nssa_appliance_conf_home=$NSSA_APPLIANCE_CONF_HOME nssa_appliance_secrets_home=$NSSA_APPLIANCE_SECRETS_HOME nssa_is_wsl=$NSSA_IS_WSL"
done;

echo "******************************************************************"
echo "** Netspective Studios Service Appliance (NSSA) setup complete. **"
echo "** ------------------------------------------------------------ **"
if [[ $NSSA_IS_WSL eq 0]]; then
    echo "** Please reboot and then the appliance will be ready for use:  **"
    echo "**                                                              **"
    echo "** > sudo reboot                                                **"
else
    echo "** To use your new appliance, exit your WSL distribution and    **"
    echo "** restart the shell.                                           **"
fi
echo "******************************************************************"
