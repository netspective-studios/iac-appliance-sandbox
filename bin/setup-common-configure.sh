#!/usr/bin/env bash
set -o errexit -o nounset -o pipefail

# NSSA_ prefix should used for all Netspective Studios Service Appliance (NSSA) env vars

export NSSA_IS_WSL=0
if [[ "$(< /proc/version)" == *@(Microsoft|WSL)* ]]; then
    if [[ "$(< /proc/version)" == *@(WSL2)* ]]; then
        export NSSA_IS_WSL=2
    else
        export NSSA_IS_WSL=1
    fi
fi

# TODO: check if secrets.d/secrets.ansible-vars.yml exists:
#       if yes, run it through Ansible lint
#       if not, copy from template and stop:
# sudo cp $NSSA_APPLIANCE_SECRETS_HOME/secrets-tmpl.ansible-vars.yml $NSSA_APPLIANCE_SECRETS_HOME/secrets.ansible-vars.yml
# exit 1

# The setup-common.sh script should be sourced from an appliance-specific 
# setup script running in the home directory of the appliance, which is
# located in $NSSA_HOME/appliances/[applianceID]. The assumption is that
# `cwd` would return $NSSA_HOME/appliances/[applianceID].

# Each appliance configuration should be under NSSA_HOME/appliances so 
# NSSA_HOME is two directories up and we should set it in case any of
# other configuration files need it.
export NSSA_HOME=${NSSA_APPLIANCE:-$(realpath ../..)}

# `cwd` would return $NSSA_HOME/appliances/[applianceID]
export NSSA_APPLIANCE=${NSSA_APPLIANCE:-$(basename `cwd`)}
export NSSA_APPLIANCE_HOME=${NSSA_APPLIANCE:-$(cwd)}
export NSSA_APPLIANCE_CONF_HOME=${NSSA_APPLIANCE:-$NSSA_APPLIANCE_HOME/conf}
export NSSA_APPLIANCE_SECRETS_HOME=${NSSA_APPLIANCE:-$NSSA_APPLIANCE_HOME/secrets.d}
export NSSA_APPLIANCE_PLAYBOOKS_HOME=${NSSA_APPLIANCE:-$NSSA_APPLIANCE_HOME/playbooks.d}

# Each appliance directory contains:
# - bin/* are either files or symlinks to $NSSA_HOME/bin/* entries
# - conf/* are either files or symlinks to $NSSA_HOME/conf/* entries
# - config/config.ts is an optional TypeScript Governed Structured Data (GSD) file
# - config/config.auto.* are files generated by the optional config.ts file
# - playbooks.d/* are either files or symlinks to NSSA_HOME/playbooks/* entries

title() {
    local color='\033[1;37m'
    local nc='\033[0m'
    printf "\n${color}$1${nc}\n"
}

